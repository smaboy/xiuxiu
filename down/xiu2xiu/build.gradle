import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

//初始化properties,用于后面从local.properties文件中获取数据
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

//定义一个方法，用于获取此刻事件
def releaseTime() {
//    return new Date().format("yyyy-MM-dd-HH-mm-ss", TimeZone.getTimeZone("UTC"))
    return new SimpleDateFormat("yyyy-MM-dd-HHmmss").format(new Date())
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.smaboy.pc120.xiuxiu"
        minSdkVersion 16
        targetSdkVersion 27
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
//签名配置
    signingConfigs {
        release {
            storeFile file(properties.getProperty("RELEASE_STORE_FILE"))
            storePassword properties.getProperty("RELEASE_STORE_PASSWORD")
            keyAlias properties.getProperty("RELEASE_KEY_ALIAS")
            keyPassword properties.getProperty("RELEASE_KEY_PASSWORD")
        }
        debug {

            storeFile file(properties.getProperty("DEBUG_STORE_FILE"))
            storePassword properties.getProperty("DEBUG_STORE_PASSWORD")
            keyAlias properties.getProperty("DEBUG_KEY_ALIAS")
            keyPassword properties.getProperty("DEBUG_KEY_PASSWORD")
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    //设置打包命令
    //打debug包的命令 Dev渠道
    task appStart(type: Exec, dependsOn: 'installDevDebug') {
        // linux
        def adb = android.getAdbExecutable().toString()
        commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.smaboy.xiuxiu.dev/com.smaboy.pc120.xiuxiu.c.activity.SplashActivity'
    }
    //打release包的命令 Dev渠道
    task releaseStart(type: Exec, dependsOn: 'installDevRelease') {
        // linux
//        def adb = android.getAdbExe().toString()
        def adb = android.getAdbExecutable().toString()
        commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.smaboy.xiuxiu.dev/com.smaboy.pc120.xiuxiu.c.activity.SplashActivity'
    }

    //    该方法用于，重新设置包的名称
    applicationVariants.all { variant ->    //批量修改Apk名字
        variant.outputs.all { output ->
//            def outputFile=output.outputFile;

            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                variant.buildType.isDebuggable()//该方法可以判断是否为debug模式
                //要被替换的源字符串
                def sourceFile = output.outputFile.name
                //替换的字符串
                def replaceFile = "xiuixu_${variant.buildType.name}_V${variant.versionName}_${releaseTime()}_${variant.flavorName}.apk"
                outputFileName = output.outputFile.name.replace(sourceFile, replaceFile)
                //遗留问题：如何获取当前module的name，如CodeBooke这个名字怎么获取到
            }
        }
    }

    //这个方法，其实就是批量设置 manifestPlaceholders = [UMC:"dev"]//不同产品，不同的渠道号
//    productFlavors.all {
//        flavor -> flavor.manifestPlaceholders = [GRADLE_CHANNEL_VALUE: name]
//    }

    //添加该行，用于解决All flavors must now belong to a named flavor dimension.
    flavorDimensions "versionCode"
    productFlavors {
        dev {//测试
            applicationId "com.smaboy.xiuxiu.dev"//不同的产品，不用的包名
            versionCode 1
            versionName "1.0.2"//不同的产品，不同的版本名
            manifestPlaceholders = [UMC: "dev"]//不同产品，不同的渠道号
        }

        pro {//生产


        }
    }


}


dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    //noinspection GradleDependency
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    //异步处理
    implementation 'org.greenrobot:eventbus:3.1.1'
    //用于联系人和其他圆形头像
    implementation 'cn.carbs.android:AvatarImageView:1.0.4'
    implementation 'de.hdodenhof:circleimageview:2.1.0'
    //图片框架
    implementation 'com.facebook.fresco:fresco:1.5.0'
    implementation 'com.github.bumptech.glide:glide:3.8.0'
    //权限管理类库
    implementation 'com.lovedise:permissiongen:0.0.6'
    //网络框架
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    //依赖注入
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'
    //解决方法数过多
    implementation 'com.android.support:multidex:1.0.3'
    //数据库框架
    implementation 'org.greenrobot:greendao:3.2.2'
    //分享

    //下拉刷新框架
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.5.1'//没有使用特殊Header，可以不加这行


}
